generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model employee {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String     @db.Uuid
  restaurant_id String     @db.Uuid
  position      String     @db.VarChar(255)
  start_date    DateTime   @db.Date
  end_date      DateTime?  @db.Date
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_restaurant_id_employee")
  user          user       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id_employee")
}

model menu {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String     @db.VarChar(255)
  description   String?    @db.VarChar(255)
  price         Int
  restaurant_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_restaurant_id")
}

model reservation {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  guest_id         String     @db.Uuid
  restaurant_id    String     @db.Uuid
  reservation_date DateTime   @db.Date
  reservation_time DateTime   @db.Time(6)
  number_of_guests Int
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  user             user       @relation(fields: [guest_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_guest_id")
  restaurant       restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_restaurant_id_reservation")
}

model restaurant {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  employee    employee[]
  menu        menu[]
  reservation reservation[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  table       table[]
}

model table {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  number        Int
  capacity      Int
  restaurant_id String     @db.Uuid
  status        String     @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  restaurant    restaurant @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_restaurant_id_table")
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  employee    employee[]
  reservation reservation[]
  restaurant  restaurant[]
}
